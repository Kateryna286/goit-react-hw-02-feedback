{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/FeedbackCounter.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","option","onLeaveFeedback","map","label","type","onClick","Section","title","children","Notification","message","FeedbackCounter","state","Options","Object","keys","onBtnClick","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Total","Percentage","Math","round","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAYeA,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCIWC,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,gBAAX,OACtB,8BACGD,EAAOE,KAAI,SAAAC,GAAK,OACf,wBAAoBC,KAAK,SAASC,QAAS,kBAAMJ,EAAgBE,IAAjE,SACGA,GADUA,SCWJG,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qCACGD,GAAS,6BAAKA,IACdC,MCIQC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mCAAGA,GAAW,8BAAMA,OC4DdC,G,kNAtDbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,QAAUC,OAAOC,KAAK,EAAKH,O,EAE3BI,WAAa,SAAAb,GACX,OAAO,EAAKc,UAAS,SAAAC,GAAS,sBAC3Bf,EAAQe,EAAUf,GAAS,O,EAIhCgB,mBAAqB,WAEnB,OADc,EAAKP,MAAMlB,KAAO,EAAKkB,MAAMjB,QAAU,EAAKiB,MAAMhB,K,EAIlEwB,gCAAkC,WAChC,IAAMC,EAAQ,EAAKF,qBACbG,EAAc,EAAKV,MAAMlB,KAAO2B,EAAS,IAC/C,OAAOE,KAAKC,MAAMF,I,4CAGpB,WACE,OACE,gCACE,cAAC,EAAD,CAASf,MAAM,yBAAf,SACE,cAAC,EAAD,CACEP,OAAQyB,KAAKZ,QACbZ,gBAAiBwB,KAAKT,eAG1B,cAAC,EAAD,CAAST,MAAM,aAAf,SACuB,IAApBkB,KAAKb,MAAMlB,MACW,IAAvB+B,KAAKb,MAAMjB,SACQ,IAAnB8B,KAAKb,MAAMhB,IACT,cAAC,EAAD,CACEF,KAAM+B,KAAKb,MAAMlB,KACjBC,QAAS8B,KAAKb,MAAMjB,QACpBC,IAAK6B,KAAKb,MAAMhB,IAChBC,MAAO4B,KAAKN,qBACZrB,mBAAoB2B,KAAKL,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,+B,GA/CJgB,cCNf,SAASC,IACtB,OACE,mCACE,cAAC,EAAD,MCCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.dfec6847.chunk.js","sourcesContent":["import React from 'react';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul>\n    <li>Good: {good}</li>\n    <li>Neutral: {neutral}</li>\n    <li>Bad: {bad}</li>\n    <li>Total: {total}</li>\n    <li>Positive feedback: {positivePercentage}%</li>\n  </ul>\n);\n\nexport default Statistics;\n","import React from 'react';\n\nconst FeedbackOptions = ({ option, onLeaveFeedback }) => (\n  <div>\n    {option.map(label => (\n      <button key={label} type=\"button\" onClick={() => onLeaveFeedback(label)}>\n        {label}\n      </button>\n    ))}\n  </div>\n);\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <>\n      {title && <h2>{title}</h2>}\n      {children}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <>{message && <div>{message}</div>}</>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Statistics from './Statistics';\nimport FeedbackOptions from './FeedbackOptions';\nimport Section from './Section';\nimport Notification from './Notification';\nimport './FeedbackCounter.css';\n//import PropTypes from 'prop-types';\n\nclass FeedbackCounter extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  Options = Object.keys(this.state);\n\n  onBtnClick = label => {\n    return this.setState(prevState => ({\n      [label]: prevState[label] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const Total = this.state.good + this.state.neutral + this.state.bad;\n    return Total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const Total = this.countTotalFeedback();\n    const Percentage = (this.state.good / Total) * 100;\n    return Math.round(Percentage);\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title=\"Please, leave feedback\">\n          <FeedbackOptions\n            option={this.Options}\n            onLeaveFeedback={this.onBtnClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.state.good !== 0 ||\n          this.state.neutral !== 0 ||\n          this.state.bad !== 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default FeedbackCounter;\n","import FeedbackCounter from './components/FeedbackCounter';\n\nexport default function App() {\n  return (\n    <>\n      <FeedbackCounter />\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}